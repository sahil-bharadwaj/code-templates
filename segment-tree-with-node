#include <bits/stdc++.h>
using namespace std;

struct Node {
    long long val; // value stored in this node (can be sum, min, max, etc.)
    
    Node(long long v = 0) { val = v; }
};

// Combine function (modify based on your operation: sum, min, max, etc.)
Node merge(const Node &a, const Node &b) {
    return Node(a.val + b.val); // for sum
    // return Node(min(a.val, b.val)); // for min
    // return Node(max(a.val, b.val)); // for max
}

class SegmentTree {
public:
    int n;
    vector<Node> tree;
    
    SegmentTree(int size) {
        n = size;
        tree.resize(4 * n);
    }

    SegmentTree(vector<long long> &arr) {
        n = arr.size();
        tree.resize(4 * n);
        build(1, 0, n - 1, arr);
    }

    // Build the segment tree
    void build(int idx, int l, int r, vector<long long> &arr) {
        if (l == r) {
            tree[idx] = Node(arr[l]);
            return;
        }
        int mid = (l + r) / 2;
        build(idx * 2, l, mid, arr);
        build(idx * 2 + 1, mid + 1, r, arr);
        tree[idx] = merge(tree[idx * 2], tree[idx * 2 + 1]);
    }

    // Update a single element
    void update(int idx, int l, int r, int pos, long long val) {
        if (l == r) {
            tree[idx] = Node(val);
            return;
        }
        int mid = (l + r) / 2;
        if (pos <= mid) update(idx * 2, l, mid, pos, val);
        else update(idx * 2 + 1, mid + 1, r, pos, val);
        
        tree[idx] = merge(tree[idx * 2], tree[idx * 2 + 1]);
    }

    void update(int pos, long long val) {
        update(1, 0, n - 1, pos, val);
    }

    // Query a range [ql, qr]
    Node query(int idx, int l, int r, int ql, int qr) {
        if (qr < l || r < ql) return Node(0); // neutral element (0 for sum)
        if (ql <= l && r <= qr) return tree[idx];
        
        int mid = (l + r) / 2;
        Node left = query(idx * 2, l, mid, ql, qr);
        Node right = query(idx * 2 + 1, mid + 1, r, ql, qr);
        return merge(left, right);
    }

    Node query(int l, int r) {
        return query(1, 0, n - 1, l, r);
    }
};

int main() {
    vector<long long> arr = {1, 2, 3, 4, 5};
    SegmentTree st(arr);
    
    cout << "Sum [0, 4]: " << st.query(0, 4).val << endl; // 15
    cout << "Sum [1, 3]: " << st.query(1, 3).val << endl; // 9
    
    st.update(2, 10); // arr[2] = 10
    cout << "After update, Sum [0, 4]: " << st.query(0, 4).val << endl; // 22
    
    return 0;
}
