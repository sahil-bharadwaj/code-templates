// segment tree template for addition can be used for any other also just change the little details
#include <bits/stdc++.h>

using namespace std ;
class ST{
   
   vector<int> seg ;
    
    public:
    ST(int n){
        seg.resize(4*n) ;
    }
    
    void build(int idx , int low , int high , vector<int> &arr ){
        if(low == high){
            seg[idx] = arr[low] ;
            return ;
        }
        
        int mid = (low+high)>>1 ;
        
        build(2*idx +1 , low ,mid ,arr) ;
        build(2*idx +2 , mid+1 , high ,arr) ;
        
        seg[idx] = seg[2*idx +1] + seg[2*idx +2] ;
        
    }
    
    // if the question says to update the arr after some queries 
    void update(int idx , int low , int high , int i, int val){
        // we reach the idx to be updated 
        if(low == high){
            seg[idx] = val ;
            return ;
        }
        
        // otherwise updates that are to be made for the update in the value that was just made 
        int mid = (low+high)>>1 ;
        if(i<= mid) update(2*idx+1 , low , mid , i , val) ;
        else update(2*idx+2 , mid+1 , high , i , val) ;
        
        seg[idx] = seg[2*idx+1] + seg[2*idx +2] ;
        
    }
    
    // result for the query like sum and all are done here 
    int query(int idx , int low , int high , int l , int r){
        // no overlap cond^n (l r low high) or (low high l r)
        if( high< l || low>r) return 0 ;
        
        // complete overlap cond^n (l low high r) 
        if(low>=l && high <= r){
            return seg[idx] ;
        }
        
        // partial overlap condition (l low r high) or (low l high r)
        int mid = (low + high) >> 1 ;
        
        int left = query(2*idx +1, low , mid , l ,r) ;
        int right = query(2*idx +2 , mid+1 , high , l ,r) ;
        
        return left+right ;
    }
    
} ;


int main(){
    int n ; 
    cin>> n ; 
    vector<int> arr(n) ;
    for(auto& x : arr) cin>>x ;
    
    ST st(n) ;
    st.build(0,0,n-1,arr) ;
   int q ; 
   cin>>q ;
   while(q--){
       int type ; 
       cin>> type ;
       if(type == 0){
           int l , r ;
           cin>>l>>r ;
            cout<<st.query(0,0,n-1,l,r)<<endl  ;
       }
       else{
           int i , val ;
           cin>>i >>val ;
           st.update(0,0,n-1,i,val) ;
           arr[i] = val ;
       }
   }
}





